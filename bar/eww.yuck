; config vars that change how the bar looks
(defvar show-only-current-workspace true)

; ^_^ code bellow
(defvar user 'whoami')

(deflisten volume :initial "0" `./scripts/volume.sh`)

(deflisten workspaces :initial "[]" "./scripts/workspaces.sh")
(defwidget ws [?reverse ?show-only-current ?left]
 (box :class "${show-only-current==``? "workspaces":
        show-only-current?
            "current-workspace":
            "workspaces"}${
        left==``?
            left:
            left?
                "-left":
                ""}"

    :spacing 0 :orientation "v"
  ; If 'reverse' is empty, default to the normal workspace order.
  ; Otherwise, use the value of 'reverse' to decide whether to reverse.
  (for workspace in { reverse != "" ? reverse ? jq(workspaces, "reverse") : workspaces : workspaces}
   (eventbox
    :active  {show-only-current==``?true:show-only-current? workspace?.['focused']:true}
    :visible {show-only-current==``?true:show-only-current? workspace?.['focused']:true}
    :cursor "pointer"
    :onclick "swaymsg workspace ${workspace?.['name']}"
    :onrightclick "swaymsg move workspace ${workspace?.['name']}; swaymsg workspace ${workspace?.['name']}"
    :onscroll {{}=="up" ? "swaymsg workspace ${workspace?.['name'] + 1}":"swaymsg workspace ${workspace?.['name'] - 1}"}
    (label :text {workspace?.['name'] + ""}
     :class {workspace?.['focused'] ? "WSfocused" : "WSunfocused"})))))

(defvar power-menu-revealed false)
(defwidget poweroptions []
 (eventbox
  :cursor "pointer"
  :onhover {"eww update power-menu-revealed=true -c" + EWW_CONFIG_DIR}
  :onhoverlost {"eww update power-menu-revealed=false -c" + EWW_CONFIG_DIR}
  (transform :translate-x "-5%"
  (box
   :orientation "v"
   :space-evenly false
   :hexpand true
   :vexpand true
   (revealer
          :transition "slidedown"
          :reveal power-menu-revealed
          :duration "400ms"
          (box :orientation "v" :spacing 5 :space-evenly false :valign "start" :halign "fill"

          (eventbox :cursor "pointer" :onclick "reboot"

          (label :text ""
              :class "reboot"
              :halign "center"
              :valign "start"))

          (transform :translate-x "7%"
          (eventbox :cursor "pointer" :onclick "swaymsg exit"
              (label :text "󰍃"
              :class "logout"
              :halign "center"
              :valign "start")))))

   (transform :translate-x "-7%"
   (eventbox
     :cursor "pointer"
     :onclick "poweroff"
     (label :text "⏻"
       :justify "center"
       :class "poweroff"
       :halign "center"
       :valign "start")))

   ))))

(defwidget clock [separator spacing]
      (box
         :orientation "v"
         :class "clock"
         :spacing { spacing }
      (label :class "hour"   :text {formattime(EWW_TIME, "%H")})
      (label :class "separator" :text {separator})
      (label :class "minute" :text {formattime(EWW_TIME, "%M")})
      (label :class "separator" :text {separator})
      (label :class "second" :text {formattime(EWW_TIME, "%S")})))

(defwidget usage-percentage [value class tooltip ?prepended-tooltip]
    (circular-progress
      :halign "fill"
      :vexpand true
      :hexpand true
      :value value
      :start-at 75
      :thickness 5
      :class class
      :tooltip {prepended-tooltip == ``? tooltip + " %"+ round(value, 2) : prepended-tooltip + "" + tooltip + " %"+ round(value, 2) }
      (label
        :class "dot"
        :limit-width 2
        :show-truncated false
        :text "")))

(defwidget reaveal-percentage [onhover onhoverlost text transition revealed revealer-duration scale-onchange eventbox-class scale-class scale-value active]
 (eventbox
    :active active
    :visible active
   :class eventbox-class
   :onhover onhover
   :onhoverlost onhoverlost
   (box
     :orientation "v"
     :space-evenly false
         (label :show-truncated false :text text)
     (revealer
       :transition transition
       :reveal revealed
       :duration revealer-duration
       (scale :onchange scale-onchange
              :min 0
              :max 101
              :value scale-value
              :class scale-class
              :orientation "v"
              :active true)))
     ))

(defwidget pc-usage []
    (box
        :class "pc-usage"
        :halign "fill"
        :valign "end"
        :vexpand true
        :hexpand true
        :space-evenly false
        :height 0
        :orientation "v"
        :spacing 0

        (usage-percentage :value {(EWW_RAM?.["used_mem"]/EWW_RAM?.["total_mem"]) * 100} :class "ram" :tooltip "ram usage")
        (usage-percentage :value {EWW_CPU?.["avg"]} :class "cpu" :tooltip "cpu usage")

        (box ; got good
        :active {EWW_BATTERY==``? false : true }
        :visible {EWW_BATTERY==``? false : true }
        (usage-percentage
            :value {EWW_BATTERY==``?0: EWW_BATTERY?.["total_avg"] ?:0 }
            :class "battery"
            :tooltip "battery usage"
            :prepended-tooltip {EWW_BATTERY==``?0: EWW_BATTERY?.["BAT0"]["status"]?:0 } ))
    )
)

(defwidget top []
 (box :class "top"
  :valign "end"
  :halign "fill"
  :hexpand false
  :vexpand true
  :orientation "v"
  :space-evenly false
  (poweroptions)
  (label :width 30 :xalign 0.5 :vexpand false :hexpand true :valign "end" :halign "center" :class "volume" :show-truncated false :text
  {volume=="MUTED" ? " " : volume>=100 ? volume : volume==0? " ":volume+"%" })
  ))

(defwidget middle []
    (box :class "middle"
        :valign "fill"
        :orientation "v"
        :halign "fill"
        :hexpand true
        :vexpand true
        :space-evenly false
            (clock :separator "━━" :spacing -7))) ;; use a box drawing character fill in the margin

(defwidget bottom [left]
    (box :class {left?"left-bottom":"bottom"}
        :valign "end"
        :halign "fill"
        :hexpand true
        :vexpand true
        :space-evenly false
        :orientation "v"
        (ws :show-only-current show-only-current-workspace :left left)
        (pc-usage)
        (systray :height 76 :hexpand true :orientation "v" :spacing 0 :space-evenly false :icon-size 18)))

(defwindow bar [bar-on-left-side]
    :monitor 0
    :geometry (geometry :x "0%"
        :y "20px"
        :width "0px"
        :height "30%"
        :anchor {bar-on-left-side?"center left":"center right"})
    :exclusive true
    (box :class "bar" ; probably could've use a center-box but i forgot about it when i made this widget and this works
        :orientation "v"
        :hexpand true
        :space-evenly false
        :vexpand true
        (top)
        (middle)
        (transform :translate-y 12
        (bottom :left bar-on-left-side))))
